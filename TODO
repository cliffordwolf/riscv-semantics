Friday, 3rd February:
DONE * Finish the implementation of execute'
DONE * Define an instance for the RiscvProgram typeclass
DONE * Split the code between several files, requirements :
  - One non scary file
  - automatically generated code within one file not pushed on the repo.
  - Create Makefile for the generation
 X - typeclasses and instances in different file(s).
  - miscellaneous plumbing functions in different file.
DONE * Look for more polymorphism in the instruction type. (Some reading required)

Friday, 17 february:
* Change memory : addresses in the processor are in bytes. Now there are in words.
* elf library in haskell or elf2hex + custom parsing Tcl/Tk.
* Add State monad to avoid dependency with mtl
* MonadPlus would allow us to define execute functions specific to each
  extensions (in different files) with execute _ = mzero. Then our step function
  would cascade those different functions (with mplus).
* For the different modules of RISCV, reuse the naming convention of riscv.


Monday, 27 february:
* Decode stage : Change Int to Integer wherever it is needed.
* avoid the use of functions for infix operators.
* elf library in haskell or elf2hex + custom parsing Tcl/Tk.
* For the different modules of RISCV, reuse the naming convention of riscv.
* testing with riscv toolchain.

Monday, 20th March:
* Build regression test harness (integration with spike?)
* Implement CSRs for machine mode (exceptions, interrupts)
* Supervisor mode

Monday, 3rd April:
* Look into: Torture Tests, The Essence of Functional Programming (paper)
* Memory-mapped IO for printing characters (test via looking at output rather than state)
  - New instance of RiscvProgram with alternate impl. of storeWord
* Implement CSRs (packing, look at prior implementation)

Monday, 17th April:
* CSRs, IO-monad based MMIO, Newlib, Spike testing harness.

Monday, May 1st:
* Search for CSR structure info, otherwise file bug report
* Finish basic CSR implementation (write tests).
* Spike testing harness (Run spike to find correct output, compare against Run.hs).
* (Fix jimm20. -> Working mandelbrot!)
Eventually: lots of testing, memory typeclass, faster memory implementation.

Monday, May 15th:
* Make fromIntegral prettier. (infix?)
* Memory typeclass, faster implementation
* Agreed to resume next Fall, low-priority thread to keep info fresh
* (Finish Spike harness.)

Thursday, September 14th
* Boot Linux in Spike
* Haskell FFI / Spike step function
* 64-bit implementation (alongside 32-bit)
* Continue work on CSRs, supervisor mode

Friday, September 22nd
* Basic interrupts via polling (interrupt CSRs).

Monday, October 2nd
* Virtual memory (check spec).
* Attempt to test it?
* Spike/Linux-saga continues
* Haskell FFI / Spike step function

Friday, October 6th
* Implement CSR that holds virtual memory mode, base address.
* SATP, MIP

Friday, October 13th
* 64-bit SATP, implement Sv39
* Check out riscv-tests
* loadField/storeField
* Timer interrupts
* Initial floating-point support using Haskell semantics?
* Replace Int/Integer with MachineInt (= Int64 for now). Set Register = Int8.

Friday, October 19th
* instret, cycle (= instret in this case).
* ECALL, MRET, EBREAK (approx. = ECALL in this case).
* Timer interrupts
* medeleg, mideleg need not exist yet (except for spike compat)
* MPIE, MIE, most things hardwired to 0
* Timer and time compare register are memory-mapped
* Taking an interrupt should disable interrupts (trap handler is responsible for re-enabling)
